int bpm = 120; //max_200
int divide = 32;
int time = 0;
int count = 0;
PVector[] points = new PVector[divide];
float[] radius = new float[divide];

//osc setting
import oscP5.*;
import netP5.*;
String sendIP = "127.0.0.1";
int sendPort = 57120;
int receivePort = 12345;
OscP5 oscP5;
NetAddress myRemoteLocation;

void setup() {
  size(200, 200);
  background(255);
  frameRate(30);
  
  //start oscP5
  oscP5 = new OscP5(this,receivePort);
  myRemoteLocation = new NetAddress(sendIP,sendPort);

  //draw default circle
  for (int i=0; i<divide; i++) {
    radius[i] = width/4;
    float x = radius[i]*cos(i*TWO_PI/divide);
    float y = radius[i]*-sin(i*TWO_PI/divide);
    points[i] = new PVector(x, y);
  }
  translate(width/2, height/2);
  for(int i=0; i<divide; i++){
    line(points[i].x, points[i].y, points[(i+1)%divide].x, points[(i+1)%divide].y);
  }
}

void draw() {
  
  //cal points when mouse pressed
  if(mousePressed) {
    float y = -1 * (mouseY-height/2);
    float x = mouseX-width/2;
    float rad = atan2(y, x)>0 ? atan2(y, x) : TWO_PI+atan2(y, x);

    //set points
    for (int i=0; i<divide; i++) {
      if (rad > i*TWO_PI/divide && rad < (i+1)*TWO_PI/divide) {
        radius[i] = sqrt(pow(abs(x), 2)+pow(abs(y), 2));
        radius[i] = min(width/2, radius[i]); //clip radius
        float px = radius[i]*cos(i*TWO_PI/divide);
        float py = radius[i]*-sin(i*TWO_PI/divide);
        point(px, py);
        points[i] = new PVector(px, py);
      }
    }
  }
  
  //send osc & draw pointer
  int delta = millis() - time;
  float dur = 60 * 1000 / bpm / 8;
  if(delta>=dur){
    
    //send osc
    OscMessage myMessage = new OscMessage("/ps");
    myMessage.add(count);    
    myMessage.add(radius[count]);
    oscP5.send(myMessage, myRemoteLocation);
    
    //draw pointer
    background(255);
    translate(width/2, height/2);
    for (int i=0; i<divide; i++) {
      line(points[i].x, points[i].y, points[(i+1)%divide].x, points[(i+1)%divide].y);
    }    
    line(0, 0, 
      radius[count] * cos(-(count)*TWO_PI/divide), 
      radius[count] * sin(-(count)*TWO_PI/divide));
    
    //z set
    time = millis();
    count = (count+1) % divide;
  }
  
  
}
